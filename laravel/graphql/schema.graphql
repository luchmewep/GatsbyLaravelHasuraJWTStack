"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    # users: [User!]! @paginate(defaultCount: 10)
    # user(id: ID @eq): User @find
    # me: User @guard @auth
    roles: [Role!]! @paginate(defaultCount: 10)
    developers: [User]
}

type User {
    id: String!
    given_name: String!
    middle_name: String!
    surname: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type UsersRoles {
    id: String!
    user_id: User! @belongsTo
    role_id: Role! @belongsTo
    is_active: Boolean!
    is_approved: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

type Role {
    id: String!
    name: String!
    description: String
    access_level: Int!
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {
    login(input: LoginInput @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
        )
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
        )
    logout: LogoutResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
        )
    forgotPassword(
        input: ForgotPasswordInput! @spread
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve"
        )
    updateForgottenPassword(
        input: NewPasswordWithCodeInput @spread
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve"
        )
    register(input: RegisterInput @spread): RegisterResponse!
        @field(resolver: "App\\GraphQL\\Mutations\\Register@resolve")
    # register(input: RegisterInput @spread): RegisterResponse!
    #     @field(
    #         resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve"
    #     )
    socialLogin(input: SocialLoginInput! @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve"
        )
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve"
        )
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve"
        )
        @guard(with: ["api"])
}
